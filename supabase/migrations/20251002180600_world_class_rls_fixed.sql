-- =====================================================
-- üîí FASE 3: RLS POLICIES WORLD-CLASS (VERS√ÉO CORRIGIDA)
-- =====================================================
-- Atualizar todas as pol√≠ticas RLS para usar sistema de autoriza√ß√£o avan√ßado
-- com estrutura correta: tenant_users em vez de profiles

-- üßπ REMOVER POL√çTICAS ANTIGAS DA TABELA ml_users
DROP POLICY IF EXISTS "Users can see ml users from their tenants" ON ml_users;
DROP POLICY IF EXISTS "Users can create ml users in their tenants" ON ml_users;
DROP POLICY IF EXISTS "Users can update ml users in their tenants" ON ml_users;
DROP POLICY IF EXISTS "Users can delete ml users in their tenants" ON ml_users;

-- üõ°Ô∏è NOVAS POL√çTICAS WORLD-CLASS PARA ml_users

-- üëÄ VISUALIZA√á√ÉO: Users com permiss√£o ml_users.read
CREATE POLICY "Authorized users can view ml_users" ON ml_users
  FOR SELECT 
  USING (
    authorize('ml_users.read'::app_permission) AND
    tenant_id IN (
      SELECT tu.tenant_id 
      FROM tenant_users tu
      WHERE tu.user_id = auth.uid()
    )
  );

-- ‚ûï CRIA√á√ÉO: Users com permiss√£o ml_users.create
CREATE POLICY "Authorized users can create ml_users" ON ml_users
  FOR INSERT 
  WITH CHECK (
    authorize('ml_users.create'::app_permission) AND
    tenant_id IN (
      SELECT tu.tenant_id 
      FROM tenant_users tu
      WHERE tu.user_id = auth.uid()
    )
  );

-- ‚úèÔ∏è ATUALIZA√á√ÉO: Users com permiss√£o ml_users.update
CREATE POLICY "Authorized users can update ml_users" ON ml_users
  FOR UPDATE 
  USING (
    authorize('ml_users.update'::app_permission) AND
    tenant_id IN (
      SELECT tu.tenant_id 
      FROM tenant_users tu
      WHERE tu.user_id = auth.uid()
    )
  )
  WITH CHECK (
    authorize('ml_users.update'::app_permission) AND
    tenant_id IN (
      SELECT tu.tenant_id 
      FROM tenant_users tu
      WHERE tu.user_id = auth.uid()
    )
  );

-- üóëÔ∏è EXCLUS√ÉO: Users com permiss√£o ml_users.delete
CREATE POLICY "Authorized users can delete ml_users" ON ml_users
  FOR DELETE 
  USING (
    authorize('ml_users.delete'::app_permission) AND
    tenant_id IN (
      SELECT tu.tenant_id 
      FROM tenant_users tu
      WHERE tu.user_id = auth.uid()
    )
  );

-- üîí POL√çTICAS PARA TABELA tenant_users

-- Remover pol√≠ticas antigas se existirem
DROP POLICY IF EXISTS "Users can see their own profile" ON tenant_users;
DROP POLICY IF EXISTS "Users can update their own profile" ON tenant_users;

-- üë§ VISUALIZA√á√ÉO DE USU√ÅRIOS DO TENANT
CREATE POLICY "Users can view tenant_users in their tenant" ON tenant_users
  FOR SELECT 
  USING (
    -- Pode ver pr√≥prio registro sempre
    user_id = auth.uid() OR
    -- Ou pode ver outros usu√°rios se tem permiss√£o users.read e mesmo tenant
    (
      authorize('users.read'::app_permission) AND
      tenant_id IN (
        SELECT tu.tenant_id 
        FROM tenant_users tu
        WHERE tu.user_id = auth.uid()
      )
    )
  );

-- ‚úèÔ∏è ATUALIZA√á√ÉO DE USU√ÅRIOS DO TENANT
CREATE POLICY "Users can update tenant_users with permission" ON tenant_users
  FOR UPDATE 
  USING (
    -- Pode atualizar pr√≥prio registro sempre
    user_id = auth.uid() OR
    -- Ou pode atualizar outros se tem permiss√£o users.update
    authorize('users.update'::app_permission)
  )
  WITH CHECK (
    -- Pode atualizar pr√≥prio registro sempre
    user_id = auth.uid() OR
    -- Ou pode atualizar outros se tem permiss√£o users.update
    authorize('users.update'::app_permission)
  );

-- ‚ûï CRIA√á√ÉO DE USU√ÅRIOS DO TENANT (para admins convidarem usu√°rios)
CREATE POLICY "Authorized users can create tenant_users" ON tenant_users
  FOR INSERT 
  WITH CHECK (
    authorize('users.create'::app_permission) OR
    user_id = auth.uid() -- Para auto-cria√ß√£o no primeiro login
  );

-- üóëÔ∏è EXCLUS√ÉO DE USU√ÅRIOS DO TENANT
CREATE POLICY "Authorized users can delete tenant_users" ON tenant_users
  FOR DELETE 
  USING (
    authorize('users.delete'::app_permission) AND
    user_id != auth.uid() -- N√£o pode deletar pr√≥prio registro
  );

-- üîí POL√çTICAS PARA TABELA tenants

-- üëÄ VISUALIZA√á√ÉO DE TENANTS
CREATE POLICY "Users can view their tenants" ON tenants
  FOR SELECT 
  USING (
    -- Super admins veem todos
    authorize('system.manage'::app_permission) OR
    -- Usu√°rios veem apenas seus tenants
    id IN (
      SELECT tu.tenant_id 
      FROM tenant_users tu
      WHERE tu.user_id = auth.uid()
    )
  );

-- ‚úèÔ∏è ATUALIZA√á√ÉO DE TENANTS
CREATE POLICY "Authorized users can update tenants" ON tenants
  FOR UPDATE 
  USING (
    authorize('tenants.update'::app_permission)
  )
  WITH CHECK (
    authorize('tenants.update'::app_permission)
  );

-- ‚ûï CRIA√á√ÉO DE TENANTS (apenas super admins)
CREATE POLICY "Super admins can create tenants" ON tenants
  FOR INSERT 
  WITH CHECK (
    authorize('tenants.create'::app_permission)
  );

-- üóëÔ∏è EXCLUS√ÉO DE TENANTS (apenas super admins)
CREATE POLICY "Super admins can delete tenants" ON tenants
  FOR DELETE 
  USING (
    authorize('tenants.delete'::app_permission)
  );

-- üìä VERIFICA√á√ÉO DAS POL√çTICAS
DO $$
DECLARE
  ml_users_policies INT;
  tenant_users_policies INT;
  tenants_policies INT;
BEGIN
  -- Contar pol√≠ticas de ml_users
  SELECT COUNT(*) INTO ml_users_policies
  FROM pg_policies 
  WHERE tablename = 'ml_users' AND schemaname = 'public';
  
  -- Contar pol√≠ticas de tenant_users
  SELECT COUNT(*) INTO tenant_users_policies
  FROM pg_policies 
  WHERE tablename = 'tenant_users' AND schemaname = 'public';
  
  -- Contar pol√≠ticas de tenants
  SELECT COUNT(*) INTO tenants_policies
  FROM pg_policies 
  WHERE tablename = 'tenants' AND schemaname = 'public';
  
  RAISE NOTICE 'üîí RLS POLICIES WORLD-CLASS DEPLOYED!';
  RAISE NOTICE 'üìä ml_users policies: %', ml_users_policies;
  RAISE NOTICE 'üë§ tenant_users policies: %', tenant_users_policies;
  RAISE NOTICE 'üè¢ tenants policies: %', tenants_policies;
  RAISE NOTICE '‚úÖ Sistema de autoriza√ß√£o granular multi-tenant ativo!';
END $$;