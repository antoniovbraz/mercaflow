-- MIGRAÇÃO PARA SISTEMA RBAC PROFISSIONAL
-- Baseado nas melhores práticas do Supabase

-- 1. Criar tipos enum para roles e permissões
CREATE TYPE public.app_role AS ENUM ('super_admin', 'admin', 'user');
CREATE TYPE public.app_permission AS ENUM (
  'users.read',
  'users.create', 
  'users.update',
  'users.delete',
  'tenants.read',
  'tenants.create',
  'tenants.update', 
  'tenants.delete',
  'ml.connect',
  'ml.read',
  'ml.write',
  'analytics.read',
  'analytics.advanced'
);

-- 2. Tabela de roles do usuário (permite múltiplos roles)
CREATE TABLE public.user_roles (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  user_id UUID REFERENCES auth.users ON DELETE CASCADE NOT NULL,
  role app_role NOT NULL,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  created_by UUID REFERENCES auth.users,
  UNIQUE(user_id, role)
);

-- 3. Tabela de permissões por role
CREATE TABLE public.role_permissions (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  role app_role NOT NULL,
  permission app_permission NOT NULL,
  UNIQUE(role, permission)
);

-- 4. Popular permissões
INSERT INTO public.role_permissions (role, permission) VALUES
-- Super Admin (todas as permissões)
('super_admin', 'users.read'),
('super_admin', 'users.create'), 
('super_admin', 'users.update'),
('super_admin', 'users.delete'),
('super_admin', 'tenants.read'),
('super_admin', 'tenants.create'),
('super_admin', 'tenants.update'),
('super_admin', 'tenants.delete'),
('super_admin', 'ml.connect'),
('super_admin', 'ml.read'),
('super_admin', 'ml.write'),
('super_admin', 'analytics.read'),
('super_admin', 'analytics.advanced'),

-- Admin (permissões de gestão)
('admin', 'users.read'),
('admin', 'users.create'),
('admin', 'users.update'),
('admin', 'tenants.read'),
('admin', 'tenants.update'),
('admin', 'ml.connect'),
('admin', 'ml.read'),
('admin', 'ml.write'),
('admin', 'analytics.read'),
('admin', 'analytics.advanced'),

-- User (permissões básicas)
('user', 'ml.connect'),
('user', 'ml.read'),
('user', 'analytics.read');

-- 5. Auth Hook para Custom Claims (RECOMENDAÇÃO OFICIAL SUPABASE)
CREATE OR REPLACE FUNCTION public.custom_access_token_hook(event jsonb)
RETURNS jsonb
LANGUAGE plpgsql
STABLE
AS $$
DECLARE
  claims jsonb;
  user_role public.app_role;
BEGIN
  -- Buscar role do usuário (primeiro role encontrado)
  SELECT role INTO user_role 
  FROM public.user_roles 
  WHERE user_id = (event->>'user_id')::uuid
  ORDER BY CASE 
    WHEN role = 'super_admin' THEN 1
    WHEN role = 'admin' THEN 2  
    WHEN role = 'user' THEN 3
  END
  LIMIT 1;

  claims := event->'claims';

  IF user_role IS NOT NULL THEN
    -- Adicionar role ao JWT
    claims := jsonb_set(claims, '{user_role}', to_jsonb(user_role));
  ELSE
    -- Role padrão
    claims := jsonb_set(claims, '{user_role}', '"user"');
  END IF;

  -- Retornar evento modificado
  event := jsonb_set(event, '{claims}', claims);
  RETURN event;
END;
$$;

-- 6. Função de autorização (CORE DO RBAC)
CREATE OR REPLACE FUNCTION public.authorize(requested_permission app_permission)
RETURNS boolean
AS $$
DECLARE
  bind_permissions int;
  user_role public.app_role;
BEGIN
  -- Buscar role do JWT
  SELECT (auth.jwt() ->> 'user_role')::public.app_role INTO user_role;
  
  -- Contar permissões
  SELECT COUNT(*)
  INTO bind_permissions
  FROM public.role_permissions
  WHERE role_permissions.permission = requested_permission
    AND role_permissions.role = user_role;

  RETURN bind_permissions > 0;
END;
$$ LANGUAGE plpgsql STABLE SECURITY DEFINER SET search_path = '';

-- 7. RLS Policies usando o sistema
-- Exemplo para uma tabela fictícia 'tenants'
/*
CREATE POLICY "Super admins can manage all tenants" ON public.tenants
FOR ALL TO authenticated
USING (SELECT authorize('tenants.read'))
WITH CHECK (SELECT authorize('tenants.create'));
*/

-- 8. Migração dos dados atuais
-- Migrar roles da tabela profiles para user_roles
INSERT INTO public.user_roles (user_id, role)
SELECT id, 
       CASE 
         WHEN role = 'super_admin' THEN 'super_admin'::app_role
         WHEN role = 'admin' THEN 'admin'::app_role
         ELSE 'user'::app_role
       END
FROM public.profiles 
WHERE role IS NOT NULL;

-- 9. Promover super admins conhecidos
INSERT INTO public.user_roles (user_id, role)
SELECT au.id, 'super_admin'::app_role
FROM auth.users au
WHERE au.email IN ('peepers.shop@gmail.com', 'antoniovbraz@gmail.com')
ON CONFLICT (user_id, role) DO NOTHING;

-- 10. Permissions e grants
GRANT USAGE ON SCHEMA public TO supabase_auth_admin;
GRANT EXECUTE ON FUNCTION public.custom_access_token_hook TO supabase_auth_admin;
GRANT ALL ON TABLE public.user_roles TO supabase_auth_admin;
GRANT ALL ON TABLE public.role_permissions TO supabase_auth_admin;
REVOKE EXECUTE ON FUNCTION public.custom_access_token_hook FROM authenticated, anon, public;
REVOKE ALL ON TABLE public.user_roles FROM authenticated, anon, public;

-- Política para permitir que auth admin leia user_roles
CREATE POLICY "Allow auth admin to read user roles" ON public.user_roles
AS PERMISSIVE FOR SELECT
TO supabase_auth_admin
USING (true);